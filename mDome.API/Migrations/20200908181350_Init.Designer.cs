// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mDome.API.Database;

namespace mDome.API.Migrations
{
    [DbContext(typeof(mDomeT1Context))]
    [Migration("20200908181350_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("mDome.API.Database.AdministratorLogin", b =>
                {
                    b.Property<int>("AdministratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AdministratorId")
                        .HasName("PK_AdminId");

                    b.ToTable("AdministratorLogin");
                });

            modelBuilder.Entity("mDome.API.Database.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlbumDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AlbumGeneratedRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("AlbumName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<byte[]>("AlbumPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("AlbumPhotoThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("DateReleased")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("mDome.API.Database.AlbumList", b =>
                {
                    b.Property<int>("AlbumListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AlbumListDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlbumListName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AlbumListType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("('Private')")
                        .HasMaxLength(10);

                    b.Property<DateTime>("ListDateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("UniqueKey")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AlbumListId");

                    b.HasIndex("UniqueKey")
                        .IsUnique()
                        .HasName("UQ__AlbumLis__2DE46E93D323461F")
                        .HasFilter("[UniqueKey] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AlbumList");
                });

            modelBuilder.Entity("mDome.API.Database.AlbumListAlbum", b =>
                {
                    b.Property<int>("AlbumListId")
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.HasKey("AlbumListId", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.ToTable("AlbumListAlbum");
                });

            modelBuilder.Entity("mDome.API.Database.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArtistBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistMembers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArtistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("ArtistPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("ArtistPhotoThumb")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artist");
                });

            modelBuilder.Entity("mDome.API.Database.ArtistGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("ArtistGenre");
                });

            modelBuilder.Entity("mDome.API.Database.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenreDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("GenreId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("mDome.API.Database.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("NotifDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("NotifText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("mDome.API.Database.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int?>("ArtistRelatedId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsGlobal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Opphoto")
                        .HasColumnName("OPPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("PostDateTime")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("PostPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PostText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("ReviewRelatedId")
                        .HasColumnType("int");

                    b.Property<int?>("UserRelatedId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("ArtistRelatedId");

                    b.HasIndex("ReviewRelatedId");

                    b.HasIndex("UserRelatedId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("mDome.API.Database.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameOfUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("mDome.API.Database.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("FavouriteSongs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeastFavouriteSongs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("mDome.API.Database.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("TrackLyrics")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValueSql("('')");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int?>("TrackNumber")
                        .HasColumnType("int");

                    b.Property<int?>("TrackViews")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("TrackYoutubeId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TrackId");

                    b.HasIndex("AlbumId");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("mDome.API.Database.Tracklist", b =>
                {
                    b.Property<int>("TracklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ListDateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("TracklistName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TracklistType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValueSql("('Private')")
                        .HasMaxLength(10);

                    b.Property<string>("UniqueKey")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TracklistId");

                    b.HasIndex("UniqueKey")
                        .IsUnique()
                        .HasName("UQ__Tracklis__2DE46E9327EC5917")
                        .HasFilter("[UniqueKey] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Tracklist");
                });

            modelBuilder.Entity("mDome.API.Database.TracklistTrack", b =>
                {
                    b.Property<int>("TracklistId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime");

                    b.HasKey("TracklistId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("TracklistTrack");
                });

            modelBuilder.Entity("mDome.API.Database.UserAlbumVote", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<bool>("Liked")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "AlbumId");

                    b.HasIndex("AlbumId");

                    b.ToTable("UserAlbumVote");
                });

            modelBuilder.Entity("mDome.API.Database.UserCommentPost", b =>
                {
                    b.Property<int>("UserCommentPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserCommentPostId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommentPost");
                });

            modelBuilder.Entity("mDome.API.Database.UserFollowers", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("FollowedByUserId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "FollowedByUserId");

                    b.HasIndex("FollowedByUserId");

                    b.ToTable("UserFollowers");
                });

            modelBuilder.Entity("mDome.API.Database.UserFollowsArtist", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("UserFollowsArtist");
                });

            modelBuilder.Entity("mDome.API.Database.UserLikePost", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<bool>("Liked")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("UserLikePost");
                });

            modelBuilder.Entity("mDome.API.Database.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("RecommendedAlbum1")
                        .HasColumnType("int");

                    b.Property<int?>("RecommendedAlbum2")
                        .HasColumnType("int");

                    b.Property<int?>("RecommendedAlbum3")
                        .HasColumnType("int");

                    b.Property<int?>("RecommendedArtist1")
                        .HasColumnType("int");

                    b.Property<int?>("RecommendedArtist2")
                        .HasColumnType("int");

                    b.Property<int?>("RecommendedArtist3")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegisteredAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("SuspendedFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("UserPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("UserWallpaper")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.HasKey("UserId")
                        .HasName("PK_UserId");

                    b.HasIndex("RecommendedAlbum1");

                    b.HasIndex("RecommendedAlbum2");

                    b.HasIndex("RecommendedAlbum3");

                    b.HasIndex("RecommendedArtist1");

                    b.HasIndex("RecommendedArtist2");

                    b.HasIndex("RecommendedArtist3");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("mDome.API.Database.UserTrackVote", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("TrackId")
                        .HasColumnType("int");

                    b.Property<bool>("Liked")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "TrackId");

                    b.HasIndex("TrackId");

                    b.ToTable("UserTrackVote");
                });

            modelBuilder.Entity("mDome.API.Database.Album", b =>
                {
                    b.HasOne("mDome.API.Database.Artist", "Artist")
                        .WithMany("Album")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_AlbumArtistId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.AlbumList", b =>
                {
                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("AlbumList")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_AlbumListUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.AlbumListAlbum", b =>
                {
                    b.HasOne("mDome.API.Database.Album", "Album")
                        .WithMany("AlbumListAlbum")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_AlbumListAlbumA")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.AlbumList", "AlbumList")
                        .WithMany("AlbumListAlbum")
                        .HasForeignKey("AlbumListId")
                        .HasConstraintName("FK_AlbumListAlbumAL")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.ArtistGenre", b =>
                {
                    b.HasOne("mDome.API.Database.Artist", "Artist")
                        .WithMany("ArtistGenre")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_ArtistGenreArtistId")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.Genre", "Genre")
                        .WithMany("ArtistGenre")
                        .HasForeignKey("GenreId")
                        .HasConstraintName("FK_ArtistGenreGenreId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.Notification", b =>
                {
                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserID")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.Post", b =>
                {
                    b.HasOne("mDome.API.Database.Artist", "ArtistRelated")
                        .WithMany("Post")
                        .HasForeignKey("ArtistRelatedId")
                        .HasConstraintName("FK_PostArtistRelatedId");

                    b.HasOne("mDome.API.Database.Review", "ReviewRelated")
                        .WithMany("Post")
                        .HasForeignKey("ReviewRelatedId")
                        .HasConstraintName("FK_PostReviewRelatedId");

                    b.HasOne("mDome.API.Database.UserProfile", "UserRelated")
                        .WithMany("Post")
                        .HasForeignKey("UserRelatedId")
                        .HasConstraintName("FK_PostUserRelatedId");
                });

            modelBuilder.Entity("mDome.API.Database.Request", b =>
                {
                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("Request")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RequestUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.Review", b =>
                {
                    b.HasOne("mDome.API.Database.Album", "Album")
                        .WithMany("Review")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_ReviewAlbumId")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("Review")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ReviewUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.Track", b =>
                {
                    b.HasOne("mDome.API.Database.Album", "Album")
                        .WithMany("Track")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_TrackAlbumId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.Tracklist", b =>
                {
                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("Tracklist")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_TracklistUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.TracklistTrack", b =>
                {
                    b.HasOne("mDome.API.Database.Track", "Track")
                        .WithMany("TracklistTrack")
                        .HasForeignKey("TrackId")
                        .HasConstraintName("FK_TracklistTrackT")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.Tracklist", "Tracklist")
                        .WithMany("TracklistTrack")
                        .HasForeignKey("TracklistId")
                        .HasConstraintName("FK_TracklistTrackTL")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.UserAlbumVote", b =>
                {
                    b.HasOne("mDome.API.Database.Album", "Album")
                        .WithMany("UserAlbumVote")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("FK_UserAlbumVoteAlbumId")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("UserAlbumVote")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserAlbumVoteUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.UserCommentPost", b =>
                {
                    b.HasOne("mDome.API.Database.Post", "Post")
                        .WithMany("UserCommentPost")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_UserCommentPostPostId")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("UserCommentPost")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserCommentPostUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.UserFollowers", b =>
                {
                    b.HasOne("mDome.API.Database.UserProfile", "FollowedByUser")
                        .WithMany("UserFollowersFollowedByUser")
                        .HasForeignKey("FollowedByUserId")
                        .HasConstraintName("FK_UserFollowersBy")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("UserFollowersUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserFollowersUser")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.UserFollowsArtist", b =>
                {
                    b.HasOne("mDome.API.Database.Artist", "Artist")
                        .WithMany("UserFollowsArtist")
                        .HasForeignKey("ArtistId")
                        .HasConstraintName("FK_UserFollowsArtistArtistId")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("UserFollowsArtist")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserFollowsArtistUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.UserLikePost", b =>
                {
                    b.HasOne("mDome.API.Database.Post", "Post")
                        .WithMany("UserLikePost")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_UserLikePostPostId")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("UserLikePost")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserLikePostUserId")
                        .IsRequired();
                });

            modelBuilder.Entity("mDome.API.Database.UserProfile", b =>
                {
                    b.HasOne("mDome.API.Database.Album", "RecommendedAlbum1Navigation")
                        .WithMany("UserProfileRecommendedAlbum1Navigation")
                        .HasForeignKey("RecommendedAlbum1")
                        .HasConstraintName("FK_UserRecommendedAlbum1");

                    b.HasOne("mDome.API.Database.Album", "RecommendedAlbum2Navigation")
                        .WithMany("UserProfileRecommendedAlbum2Navigation")
                        .HasForeignKey("RecommendedAlbum2")
                        .HasConstraintName("FK_UserRecommendedAlbum2");

                    b.HasOne("mDome.API.Database.Album", "RecommendedAlbum3Navigation")
                        .WithMany("UserProfileRecommendedAlbum3Navigation")
                        .HasForeignKey("RecommendedAlbum3")
                        .HasConstraintName("FK_UserRecommendedAlbum3");

                    b.HasOne("mDome.API.Database.Artist", "RecommendedArtist1Navigation")
                        .WithMany("UserProfileRecommendedArtist1Navigation")
                        .HasForeignKey("RecommendedArtist1")
                        .HasConstraintName("FK_UserRecommendedArtist1");

                    b.HasOne("mDome.API.Database.Artist", "RecommendedArtist2Navigation")
                        .WithMany("UserProfileRecommendedArtist2Navigation")
                        .HasForeignKey("RecommendedArtist2")
                        .HasConstraintName("FK_UserRecommendedArtist2");

                    b.HasOne("mDome.API.Database.Artist", "RecommendedArtist3Navigation")
                        .WithMany("UserProfileRecommendedArtist3Navigation")
                        .HasForeignKey("RecommendedArtist3")
                        .HasConstraintName("FK_UserRecommendedArtist3");
                });

            modelBuilder.Entity("mDome.API.Database.UserTrackVote", b =>
                {
                    b.HasOne("mDome.API.Database.Track", "Track")
                        .WithMany("UserTrackVote")
                        .HasForeignKey("TrackId")
                        .HasConstraintName("FK_UserTrackVoteTrackId")
                        .IsRequired();

                    b.HasOne("mDome.API.Database.UserProfile", "User")
                        .WithMany("UserTrackVote")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserTrackVoteUserId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
